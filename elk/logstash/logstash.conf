### logstash pipeline configuration example

input {
  file {
    path => "/tmp/logs/*.json"  #represents local path (inside logstash docker container), mapped via docker volume to ${APPLOG_PATH} defined in .env/envvar, invoked via docker-compose.yml
    start_position => "beginning"
    codec => "json"
    sincedb_path => "/dev/null"
  }
}
filter {

  #### message parser for urllib3.connectionpool._make_request
  if [log][logger] == "urllib3.connectionpool" {
    if [log][origin][function] == "_make_request" {
      grok {
        match => { "message" => "(?<url.original>http:\/\/*.*:\d+) \"%{WORD:http.method} \/ (?<http.version>HTTP\/\d+\.\d+)\" (?<http.status_code>\d{3})"}
      }
    }
  }

  #### message json parser for request_id logger
  if [log][logger] == "request_id" {
    grok {

    }
    json { 
      source => "message" 
      target => "tmp"
    }
    mutate {
      rename => {"tmp.bytes" => "http.request.bytes"}
      rename => {"tmp.REQUEST_ID" => "trace.id"}

    }
    drop {
      remove_field => ["tmp","message"]
    }
  }

  
  mutate {
#        convert => { "http_response_bytes" => "integer" }
#        convert => { "process_elapsed" => "integer" }

    rename => { "host" => "agent.id"} 
    add_field => { "agent.name" => "logstash"}
    rename => { "path" => "log.file.path"} 
  }
}
output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "${ES_INDEX}-%{+YYYY.MM.dd}"   # ${ES_INDEX}, defined in .env or via env var, invoked via docker-compose, example index: applog-2020-04-10
  }
  stdout { codec => rubydebug }
}